{
    "name": "Netatmo Weather",
    "type": "com.fibaro.weather",
    "apiVersion": "1.3",
    "initialProperties": {
        "viewLayout": {
            "$jason": {
                "body": {
                    "header": {
                        "style": {
                            "height": "0"
                        },
                        "title": "NetatmoWeatherProvider"
                    },
                    "sections": {
                        "items": [
                            {
                                "components": [
                                    {
                                        "components": [
                                            {
                                                "name": "button_temperature",
                                                "style": {
                                                    "weight": "0.50"
                                                },
                                                "text": "Temperatura",
                                                "type": "button",
                                                "visible": true
                                            },
                                            {
                                                "name": "button_humidity",
                                                "style": {
                                                    "weight": "0.50"
                                                },
                                                "text": "Wilgotność",
                                                "type": "button",
                                                "visible": true
                                            }
                                        ],
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "type": "horizontal"
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            },
                            {
                                "components": [
                                    {
                                        "components": [
                                            {
                                                "name": "button_wind",
                                                "style": {
                                                    "weight": "0.50"
                                                },
                                                "text": "Wiatr",
                                                "type": "button",
                                                "visible": true
                                            },
                                            {
                                                "name": "button_rain",
                                                "style": {
                                                    "weight": "0.50"
                                                },
                                                "text": "Deszcz",
                                                "type": "button",
                                                "visible": true
                                            }
                                        ],
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "type": "horizontal"
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            },
                            {
                                "components": [
                                    {
                                        "name": "label1",
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "text": "Netatmo weather provider",
                                        "type": "label"
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            },
                            {
                                "components": [
                                    {
                                        "components": [
                                            {
                                                "name": "button2_1",
                                                "style": {
                                                    "weight": "0.50"
                                                },
                                                "text": "Szukaj urządzeń",
                                                "type": "button",
                                                "visible": true
                                            },
                                            {
                                                "name": "button2_2",
                                                "style": {
                                                    "weight": "0.50"
                                                },
                                                "text": "Odśwież",
                                                "type": "button",
                                                "visible": true
                                            }
                                        ],
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "type": "horizontal"
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            }
                        ]
                    }
                },
                "head": {
                    "title": "NetatmoWeatherProvider"
                }
            }
        },
        "uiView": [
            {
                "components": [
                    {
                        "eventBinding": {
                            "onLongPressDown": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressDown",
                                            "button_temperature"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onLongPressReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressReleased",
                                            "button_temperature"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onReleased",
                                            "button_temperature"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ]
                        },
                        "name": "button_temperature",
                        "style": {
                            "weight": "0.50"
                        },
                        "text": "Temperatura",
                        "type": "button",
                        "visible": true
                    },
                    {
                        "eventBinding": {
                            "onLongPressDown": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressDown",
                                            "button_humidity"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onLongPressReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressReleased",
                                            "button_humidity"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onReleased",
                                            "button_humidity"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ]
                        },
                        "name": "button_humidity",
                        "style": {
                            "weight": "0.50"
                        },
                        "text": "Wilgotność",
                        "type": "button",
                        "visible": true
                    }
                ],
                "style": {
                    "weight": "1.0"
                },
                "type": "horizontal"
            },
            {
                "components": [
                    {
                        "eventBinding": {
                            "onLongPressDown": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressDown",
                                            "button_wind"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onLongPressReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressReleased",
                                            "button_wind"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onReleased",
                                            "button_wind"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ]
                        },
                        "name": "button_wind",
                        "style": {
                            "weight": "0.50"
                        },
                        "text": "Wiatr",
                        "type": "button",
                        "visible": true
                    },
                    {
                        "eventBinding": {
                            "onLongPressDown": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressDown",
                                            "button_rain"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onLongPressReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressReleased",
                                            "button_rain"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onReleased",
                                            "button_rain"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ]
                        },
                        "name": "button_rain",
                        "style": {
                            "weight": "0.50"
                        },
                        "text": "Deszcz",
                        "type": "button",
                        "visible": true
                    }
                ],
                "style": {
                    "weight": "1.0"
                },
                "type": "horizontal"
            },
            {
                "components": [
                    {
                        "name": "label1",
                        "style": {
                            "weight": "1.0"
                        },
                        "text": "Netatmo weather provider",
                        "type": "label"
                    }
                ],
                "style": {
                    "weight": "1.0"
                },
                "type": "horizontal"
            },
            {
                "components": [
                    {
                        "eventBinding": {
                            "onLongPressDown": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressDown",
                                            "button2_1"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onLongPressReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressReleased",
                                            "button2_1"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onReleased",
                                            "button2_1"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ]
                        },
                        "name": "button2_1",
                        "style": {
                            "weight": "0.50"
                        },
                        "text": "Szukaj urządzeń",
                        "type": "button",
                        "visible": true
                    },
                    {
                        "eventBinding": {
                            "onLongPressDown": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressDown",
                                            "button2_2"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onLongPressReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressReleased",
                                            "button2_2"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onReleased",
                                            "button2_2"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ]
                        },
                        "name": "button2_2",
                        "style": {
                            "weight": "0.50"
                        },
                        "text": "Odśwież",
                        "type": "button",
                        "visible": true
                    }
                ],
                "style": {
                    "weight": "1.0"
                },
                "type": "horizontal"
            }
        ],
        "useUiView": false,
        "uiCallbacks": [
            {
                "callback": "showTemperature",
                "eventType": "onReleased",
                "name": "button_temperature"
            },
            {
                "callback": "showHumidity",
                "eventType": "onReleased",
                "name": "button_humidity"
            },
            {
                "callback": "showWind",
                "eventType": "onReleased",
                "name": "button_wind"
            },
            {
                "callback": "showRain",
                "eventType": "onReleased",
                "name": "button_rain"
            },
            {
                "callback": "searchEvent",
                "eventType": "onReleased",
                "name": "button2_1"
            },
            {
                "callback": "refreshEvent",
                "eventType": "onReleased",
                "name": "button2_2"
            }
        ],
        "quickAppVariables": [
            {
                "name": "ClientID",
                "type": "string",
                "value": ""
            },
            {
                "name": "ClientSecret",
                "type": "password",
                "value": ""
            },
            {
                "name": "Username",
                "type": "string",
                "value": ""
            },
            {
                "name": "RefreshToken",
                "type": "string",
                "value": ""
            }
        ],
        "typeTemplateInitialized": true
    },
    "initialInterfaces": [],
    "files": [
        {
            "name": "main",
            "isMain": true,
            "isOpen": true,
            "content": "--[[\nNetatmo Weather Provider\n@author ikubicki\n@version 2.1.1\n]]\n\nfunction QuickApp:setCondition(condition)\n    local conditionCodes = {\n        day = { \n            unknown = 3200,\n            clear = 32,\n            rain = 40,\n            cloudy = 28,\n            heat = 36,\n            freeze = 25,\n            windy = 23,\n        },\n        night = { \n            unknown = 3200,\n            clear = 31,\n            rain = 40,\n            cloudy = 29,\n            heat = 36,\n            freeze = 25,\n            windy = 23,\n        }\n    }\n    collection = 'day'\n    if tonumber(os.date('%H')) > 20 or tonumber(os.date('%H')) < 6 then\n        collection = 'night'\n    end\n    local conditionCode = conditionCodes[collection][condition]\n    if conditionCode then\n        self:updateProperty(\"ConditionCode\", conditionCode)\n        self:updateProperty(\"WeatherCondition\", condition)\n    end\nend\n\nfunction QuickApp:onInit()\n    self.config = Config:new(self)\n    self.i18n = i18n:new(api.get(\"/settings/info\").defaultLanguage)\n    self.netatmo = Netatmo:new(self.config)\n    self:trace('')\n    self:trace('Netatmo weather provider')\n    self:updateProperty('manufacturer', 'Netatmo')\n    self:updateProperty('manufacturer', 'Weather Station')\n    self:updateView(\"button_temperature\", \"text\", self.i18n:get('Temperature'))\n    self:updateView(\"button_humidity\", \"text\", self.i18n:get('Humidity')) \n    self:updateView(\"button_wind\", \"text\", self.i18n:get('Wind')) \n    self:updateView(\"button_rain\", \"text\", self.i18n:get('Rain')) \n    self:updateView(\"button2_1\", \"text\", self.i18n:get('search-devices'))\n    self:updateView(\"button2_2\", \"text\", self.i18n:get('refresh'))\n    self:run()\n    self._rain = 0\nend\n\nfunction QuickApp:run()\n    self:pullNetatmoData()\n    local interval = self.config:getTimeoutInterval()\n    if (interval > 0) then\n        fibaro.setTimeout(interval, function() self:run() end)\n    end\nend\n\nfunction QuickApp:pullNetatmoData()\n    self:updateView(\"button2_2\", \"text\", self.i18n:get('refreshing'))\n    local getWeatherDataCallback = function(weatherData)\n\n        if weatherData.error ~= nil then\n            self:updateView(\"label1\", \"text\", weatherData.error)\n            self:updateView(\"button2_2\", \"text\", self.i18n:get('refresh'))\n            return\n        end\n\n        self:updateProperty(\"Temperature\", weatherData.temp)\n        self:updateProperty(\"Humidity\", weatherData.humi)\n        self:updateProperty(\"Wind\", weatherData.wind)\n        self._rain = weatherData.rain\n\n        if weatherData.wind > 30 then\n            self:setCondition('windy')\n        elseif weatherData.rain > 0 then\n            self:setCondition('rain')\n        elseif weatherData.humi > 70 then\n            self:setCondition('cloudy')\n        elseif weatherData.temp < 0 then\n            self:setCondition('freeze')\n        elseif weatherData.temp > 30 then\n            self:setCondition('heat')\n        else \n            self:setCondition('clear')\n        end\n        self:updateView(\"label1\", \"text\", string.format(self.i18n:get('last-update'), os.date('%Y-%m-%d %H:%M:%S')))\n        self:updateView(\"button2_2\", \"text\", self.i18n:get('refresh'))\n    end\n    self.netatmo:getWeatherData(getWeatherDataCallback)    \nend\n\nfunction QuickApp:refreshEvent()\n    self:pullNetatmoData()\nend\n\nfunction QuickApp:searchEvent()\n    self:debug(self.i18n:get('searching-devices'))\n    self:updateView(\"button2_1\", \"text\", self.i18n:get('searching-devices'))\n    local searchDevicesCallback = function(stations)\n\n        if stations.error ~= nil then\n            self:updateView(\"label1\", \"text\", stations.error)\n            self:updateView(\"button2_1\", \"text\", self.i18n:get('search-devices'))\n            return\n        end\n\n        -- QuickApp:debug(json.encode(stations))\n        -- printing results\n        for _, station in pairs(stations) do\n            QuickApp:trace(string.format(self.i18n:get('search-row-station'), station.name, station.id))\n            QuickApp:trace(string.format(self.i18n:get('search-row-station-modules'), #station.modules))\n            for __, module in ipairs(station.modules) do\n                QuickApp:trace(string.format(self.i18n:get('search-row-module'), module.name, module.id, module.type))\n                QuickApp:trace(string.format(self.i18n:get('search-row-module_types'), table.concat(module.data_type, ', ')))\n            end\n        end\n        self:updateView(\"button2_1\", \"text\", self.i18n:get('search-devices'))\n        self:updateView(\"label1\", \"text\", string.format(self.i18n:get('check-logs'), 'QUICKAPP' .. self.id))\n    end\n    self.netatmo:searchDevices(searchDevicesCallback)\nend\n\nfunction QuickApp:showTemperature()\n    self:updateView(\"button_temperature\", \"text\", self:getProperty(\"Temperature\") .. \" °C\")\n    fibaro.setTimeout(5000, function() \n        self:updateView(\"button_temperature\", \"text\", self.i18n:get('Temperature')) \n    end)\nend\n\nfunction QuickApp:showHumidity()\n    self:updateView(\"button_humidity\", \"text\", self:getProperty(\"Humidity\") .. \" %\")\n    fibaro.setTimeout(5000, function() \n        self:updateView(\"button_humidity\", \"text\", self.i18n:get('Humidity')) \n    end)\nend\n\nfunction QuickApp:showWind()\n    self:updateView(\"button_wind\", \"text\", self:getProperty(\"Wind\") .. \" km/h\")\n    fibaro.setTimeout(5000, function() \n        self:updateView(\"button_wind\", \"text\", self.i18n:get('Wind')) \n    end)\nend\n\nfunction QuickApp:showRain()\n    self:updateView(\"button_rain\", \"text\", self._rain .. \" mm\")\n    fibaro.setTimeout(5000, function() \n        self:updateView(\"button_rain\", \"text\", self.i18n:get('Rain')) \n    end)\nend\n\nfunction QuickApp:getProperty(name)\n    return fibaro.getValue(plugin.mainDeviceId, name)\nend\n\n\n\n\n"
        },
        {
            "name": "HTTPClient",
            "isMain": false,
            "isOpen": true,
            "content": "--[[\r\nHTTPClient wrapper\r\n@author ikubicki\r\n]]\r\nclass 'HTTPClient'\r\n\r\nfunction HTTPClient:new(options)\r\n    if not options then\r\n        options = {}\r\n    end\r\n    self.options = options\r\n    return self\r\nend\r\n\r\nfunction HTTPClient:get(url, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    client:request(self:url(url), self:requestOptions(success, error, 'GET', nil, headers)) \r\nend\r\n\r\nfunction HTTPClient:post(url, data, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers)) \r\nend\r\n\r\nfunction HTTPClient:postForm(url, data, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    headers[\"Content-Type\"] = 'application/x-www-form-urlencoded;charset=UTF-8'\r\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers, true)) \r\nend\r\n\r\nfunction HTTPClient:put(url, data, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    client:request(self:url(url), self:requestOptions(success, error, 'PUT', data, headers)) \r\nend\r\n\r\nfunction HTTPClient:delete(url, success, error, headers)\r\n    local client = net.HTTPClient({timeout = 10000})\r\n    if not headers then\r\n        headers = {}\r\n    end\r\n    client:request(self:url(url), self:requestOptions(success, error, 'DELETE', nil, headers)) \r\nend\r\n\r\nfunction HTTPClient:url(url)\r\n    if (string.sub(url, 0, 4) == 'http') then\r\n        return url\r\n    end\r\n    if not self.options.baseUrl then\r\n        self.options.baseUrl = 'http://localhost'\r\n    end\r\n    return self.options.baseUrl .. tostring(url)\r\nend\r\n\r\nfunction HTTPClient:requestOptions(success, error, method, data, headers, isFormData)\r\n    if error == nil then\r\n        error = function (error)\r\n            QuickApp:error(json.encode(error))\r\n        end\r\n    end\r\n    if method == nil then\r\n        method = 'GET'\r\n    end\r\n    local options = {\r\n        checkCertificate = false,\r\n        method = method,\r\n        headers = headers,\r\n    }\r\n    if data ~= nil then\r\n        if isFormData then\r\n            options.data = ''\r\n            for key, value in pairs(data) do\r\n                if string.len(options.data) > 0 then \r\n                    options.data = options.data .. '&'\r\n                end\r\n                options.data = options.data .. key .. '=' .. value\r\n            end\r\n        elseif type(data) == 'string' then\r\n            options.data = data\r\n        else\r\n            options.data = json.encode(data)\r\n        end\r\n    end\r\n    return {\r\n        options = options,\r\n        success = success,\r\n        error = error\r\n    }\r\nend"
        },
        {
            "name": "Globals",
            "isMain": false,
            "isOpen": true,
            "content": "--[[\r\nGlobal variables handler\r\n@author ikubicki\r\n]]\r\nclass 'Globals'\r\n\r\nfunction Globals:get(name, alternative)\r\n    local response = api.get('/globalVariables/' .. name)\r\n    if response then\r\n        local char = string.sub(response.value, 1, 1)\r\n        if char == '{' or char == '\"' then\r\n            return json.decode(response.value)\r\n        end\r\n        return response.value\r\n    end\r\n    return alternative\r\nend\r\n\r\nfunction Globals:set(name, value)\r\n    local response = api.put('/globalVariables/' .. name, {\r\n        name = name,\r\n        value = json.encode(value)\r\n    })\r\n    if not response then\r\n        response = api.post('/globalVariables', {\r\n            name = name,\r\n            value = json.encode(value)\r\n        })\r\n        \r\n    end\r\n    if response ~= nil then\r\n        if response.type == 'ERROR' then\r\n            QuickApp:error('GLOBALS ERROR[' .. response.reason .. ']:', response.message)\r\n        end\r\n    end\r\nend"
        },
        {
            "name": "i18n",
            "isMain": false,
            "isOpen": true,
            "content": "--[[\r\nInternationalization tool\r\n@author ikubicki\r\n]]\r\nclass 'i18n'\r\n\r\nfunction i18n:new(langCode)\r\n    self.phrases = phrases[langCode]\r\n    return self\r\nend\r\n\r\nfunction i18n:get(key)\r\n    if self.phrases[key] then\r\n        return self.phrases[key]\r\n    end\r\n    return key\r\nend\r\n\r\nphrases = {\r\n    pl = {\r\n        ['search-devices'] = 'Szukaj urządzeń',\r\n        ['searching-devices'] = 'Szukam...',\r\n        ['refresh'] = 'Odśwież dane',\r\n        ['refreshing'] = 'Odświeżam...',\r\n        ['last-update'] = 'Ostatnia aktualizacja: %s',\r\n        ['Temperature'] = 'Temperatura',\r\n        ['Wind'] = 'Siła wiatru',\r\n        ['Humidity'] = 'Wilgotność',\r\n        ['Rain'] = 'Deszcz',\r\n        ['search-row-station'] = '__ STACJA POGODOWA %s',\r\n        ['search-row-station-modules'] = '__ Wykryto %d modułów',\r\n        ['search-row-module'] = '____ MODUŁ %s (ID: %s, typ: %s)',\r\n        ['search-row-module_types'] = '____ Typy danych: %s',\r\n        ['check-logs'] = 'Zakończono wyszukiwanie. Sprawdź logi tego urządzenia: %s',\r\n    },\r\n    en = {\r\n        ['search-devices'] = 'Search devices',\r\n        ['searching-devices'] = 'Searching...',\r\n        ['refresh'] = 'Update data',\r\n        ['refreshing'] = 'Updating...',\r\n        ['last-update'] = 'Last update at %s',\r\n        ['Temperature'] = 'Temperature',\r\n        ['Wind'] = 'Wind Strength',\r\n        ['Humidity'] = 'Humidity',\r\n        ['Rain'] = 'Rain',\r\n        ['search-row-station'] = '__ WEATHER STATION %s',\r\n        ['search-row-station-modules'] = '__ %d modules detected',\r\n        ['search-row-module'] = '____ MODULE %s (ID: %s, type: %s)',\r\n        ['search-row-module_types'] = '____ Data types: %s',\r\n        ['check-logs'] = 'Check device logs (%s) for search results',\r\n    },\r\n    de = {\r\n        ['search-devices'] = 'Geräte suchen',\r\n        ['searching-devices'] = 'Suchen...',\r\n        ['refresh'] = 'Aktualisieren',\r\n        ['refreshing'] = 'Aktualisieren...',\r\n        ['last-update'] = 'Letztes update: %s',\r\n        ['Temperature'] = 'Temperatur',\r\n        ['Wind'] = 'Windstärke',\r\n        ['Humidity'] = 'Luftfeuchtigkeit',\r\n        ['Rain'] = 'Regenfall',\r\n        ['search-row-station'] = '__ WETTERSTATION %s',\r\n        ['search-row-station-modules'] = '__ %d module erkannt',\r\n        ['search-row-module'] = '____ MODULE %s (ID: %s, typ: %s)',\r\n        ['search-row-module_types'] = '____ Datentypen: %s',\r\n        ['check-logs'] = 'Überprüfen Sie die Geräteprotokolle (%s) auf Suchergebnisse',\r\n    }\r\n}"
        },
        {
            "name": "Config",
            "isMain": false,
            "isOpen": true,
            "content": "--[[\r\nConfiguration handler\r\n@author ikubicki\r\n]]\r\nclass 'Config'\r\n\r\nfunction Config:new(app)\r\n    self.app = app\r\n    self:init()\r\n    return self\r\nend\r\n\r\nfunction Config:getClientID()\r\n    return self.clientID\r\nend\r\n\r\nfunction Config:getClientSecret()\r\n    return self.clientSecret\r\nend\r\n\r\nfunction Config:getUsername()\r\n    return self.username\r\nend\r\n\r\nfunction Config:getPassword()\r\n    return self.password\r\nend\r\n\r\nfunction Config:getDeviceID()\r\n    return self.deviceID\r\nend\r\n\r\nfunction Config:getAccessToken()\r\n    return self.token\r\nend\r\n\r\nfunction Config:setAccessToken(token)\r\n    self.app:setVariable(\"AccessToken\", token)\r\n    self.token = token\r\nend\r\n\r\nfunction Config:getRefreshToken()\r\n    return self.rtoken\r\nend\r\n\r\nfunction Config:setRefreshToken(token)\r\n    self.app:setVariable(\"RefreshToken\", token)\r\n    self.rtoken = rtoken\r\nend\r\n\r\nfunction Config:getTimeoutInterval()\r\n    return tonumber(self.interval) * 60000\r\nend\r\n\r\n--[[\r\nThis function takes variables and sets as global variables if those are not set already.\r\nThis way, adding other devices might be optional and leaves option for users, \r\nwhat they want to add into HC3 virtual devices.\r\n]]\r\nfunction Config:init()\r\n    self.clientID = self.app:getVariable('ClientID')\r\n    self.clientSecret = self.app:getVariable('ClientSecret')\r\n    self.username = self.app:getVariable('Username')\r\n    self.password = self.app:getVariable('Password')\r\n    self.deviceID = tostring(self.app:getVariable('DeviceID'))\r\n    self.interval = self.app:getVariable('Interval')\r\n    self.token = self.app:getVariable('AccessToken')\r\n    self.rtoken = self.app:getVariable('RefreshToken')\r\n\r\n    local storedClientID = Globals:get('netatmo_client_id')\r\n    local storedClientSecret = Globals:get('netatmo_client_secret')\r\n    local storedRToken = Globals:get('netatmo_rtoken', '')\r\n    local storedInterval = Globals:get('netatmo_interval')\r\n\r\n    -- handling clientID\r\n    if string.len(self.clientID) < 4 and string.len(storedClientID) > 3 then\r\n        self.app:setVariable(\"ClientID\", storedClientID)\r\n        self.clientID = storedClientID\r\n    elseif (storedClientID == nil and self.clientID) then -- or storedClientID ~= self.clientID then\r\n        Globals:set('netatmo_client_id', self.clientID)\r\n    end\r\n    -- handling client secret\r\n    if string.len(self.clientSecret) < 4 and string.len(storedClientSecret) > 3 then\r\n        self.app:setVariable(\"ClientSecret\", storedClientSecret)\r\n        self.clientSecret = storedClientSecret\r\n    elseif (storedClientSecret == nil and self.clientSecret) then -- or storedClientSecret ~= self.clientSecret then\r\n        Globals:set('netatmo_client_secret', self.clientSecret)\r\n    end\r\n    -- handling rtoken\r\n    if string.len(self.rtoken) < 4 and string.len(storedRToken) > 3 then\r\n        self.app:setVariable(\"RefreshToken\", storedRToken)\r\n        self.rtoken = storedRToken\r\n    elseif (storedRToken == nil and self.rtoken) then\r\n        Globals:set('netatmo_rtoken', self.token)\r\n    end\r\n    -- handling interval\r\n    if not self.interval or self.interval == \"\" then\r\n        if storedInterval and storedInterval ~= \"\" then\r\n            self.app:setVariable(\"Interval\", storedInterval)\r\n            self.interval = storedInterval\r\n        else\r\n            self.interval = \"5\"\r\n        end\r\n    end\r\n    if (storedInterval == \"\" and self.interval ~= \"\") then -- or storedInterval ~= self.interval then\r\n        Globals:set('netatmo_interval', self.interval)\r\n    end\r\nend"
        },
        {
            "name": "Netatmo",
            "isMain": false,
            "isOpen": true,
            "content": "--[[\nNetatmo SDK\n@author ikubicki\n]]\nclass 'Netatmo'\n\nfunction Netatmo:new(config)\n    self.config = config\n    self.user = config:getUsername()\n    self.pass = config:getPassword()\n    self.client_id = config:getClientID()\n    self.client_secret = config:getClientSecret()\n    self.device_id = config:getDeviceID()\n    self.access_token = config:getAccessToken()\n    self.token = Globals:get('netatmo_atoken', '')\n    self.refresh_token = config:getRefreshToken()\n    self.http = HTTPClient:new({})\n    return self\nend\n\nfunction Netatmo:searchDevices(callback)\n    local buildModule = function(module)\n        return {\n            id = module._id,\n            name = module.module_name,\n            type = module.type,\n            data_type = module.data_type,\n        }\n    end\n    local buildStation = function(data)\n        local station = {\n            id = data._id,\n            home_id = data.home_id,\n            name = data.station_name,\n            modules = {},\n        }\n        table.insert(station.modules, buildModule(data))\n        return station\n    end\n    local getStationsDataCallback = function(devices)\n        local stations = {}\n        for _, device in ipairs(devices) do\n            local station = buildStation(device)\n            for _, module in ipairs(device.modules) do\n                table.insert(station.modules, buildModule(module))\n            end\n            table.insert(stations, station)\n        end\n        if callback ~= nil then\n            callback(stations)\n        end\n    end\n    local authCallback = function(response)\n        if response.error ~= nil then\n            callback(response)\n            return\n        end\n        self:getStationsData(getStationsDataCallback)\n    end\n    self:auth(authCallback)\nend\n\nfunction Netatmo:getWeatherData(callback)\n    local getStationsDataCallback = function(devices)\n        local device = devices[1]\n        local weatherData = {\n            _id = device._id,\n            temp = tonumber(device.dashboard_data[\"Temperature\"]),\n            humi = tonumber(device.dashboard_data[\"Humidity\"]),\n            rain = 0,\n            wind = 0,   \n        }\n        for _, module in pairs(device.modules) do\n            if module.type == \"NAModule1\" then\n                weatherData.temp = tonumber(module.dashboard_data.Temperature)\n                weatherData.humi = tonumber(module.dashboard_data.Humidity)\n            end\n            if module.type == \"NAModule2\" then\n                weatherData.wind = tonumber(module.dashboard_data.WindStrength)\n            end\n            if module.type == \"NAModule3\" then\n                weatherData.rain = tonumber(module.dashboard_data.Rain)\n            end\n        end\n        if callback ~= nil then\n            callback(weatherData)\n        end\n    end\n    local authCallback = function(response)\n        if response.error ~= nil then\n            callback(response)\n            return\n        end\n        self:getStationsData(getStationsDataCallback)\n    end\n    self:auth(authCallback)\nend\n\nfunction Netatmo:getStationsData(callback, attempt)\n    if attempt == nil then\n        attempt = 0\n    end\n    local fail = function(response)\n        QuickApp:error('Unable to pull devices')\n        QuickApp:debug(json.encode(response.data))\n        Netatmo:setToken('')\n        if attempt < 3 then\n            attempt = attempt + 1\n            fibaro.setTimeout(3000, function()\n                QuickApp:debug('Netatmo:getStationData - Retry attempt #' .. attempt)\n                local authCallback = function(response)\n                    self:getStationsData(callback, attempt)\n                end\n                Netatmo:auth(authCallback)\n            end)\n        end\n    end\n    local success = function(response)\n        if response.status > 299 then\n            fail(response)\n            return\n        end\n        local data = json.decode(response.data)\n        if callback ~= nil then\n            callback(data.body.devices)\n        end\n    end\n    local url = 'https://api.netatmo.com/api/getstationsdata'\n    if string.len(self.device_id) > 1 then\n        url = url .. '?device_id=' .. self.device_id\n    end\n    local headers = {\n        Authorization = \"Bearer \" .. self:getToken()\n    }\n    self.http:get(url, success, fail, headers)\nend\n\nfunction Netatmo:auth(callback)\n    if string.len(self:getToken()) > 10 then\n        -- QuickApp:debug('Already authenticated')\n        if callback ~= nil then\n            callback({})\n        end\n        return\n    end\n    if string.len(self.access_token) > 10 then\n        if callback ~= nil then\n            Netatmo:setToken(self.access_token)\n            callback({})\n        end\n        return\n    end\n    local data = {\n        [\"grant_type\"] = 'refresh_token',\n        [\"refresh_token\"] = self.refresh_token,\n        [\"client_id\"] = self.client_id,\n        [\"client_secret\"] = self.client_secret,\n    }\n    local fail = function(response)\n        QuickApp:error('Unable to authenticate')\n        if self.access_token == self.token then\n            QuickApp:error('Removing configured AccessToken')\n            self.config:setAccessToken('')\n        end\n        Netatmo:setToken('')\n        if callback ~= nil then\n            callback(response)\n        end\n    end\n    if string.len(self.refresh_token) < 10 then\n        QuickApp:error('No refresh token available. Cannot authenticate the device.')\n        fail({\n            error = \"No refresh token available. Cannot authenticate the device.\"\n        })\n        return\n    end\n    local success = function(response)\n        -- QuickApp:debug('---')\n        -- QuickApp:debug(response.status)\n        -- QuickApp:debug(response.data)\n        if response.status > 299 or response.status < 200 then\n            fail({\n                error = \"Unable to authenticate\"\n            })\n            return\n        end\n        local data = json.decode(response.data)\n        Netatmo:setToken(data.access_token)\n        Netatmo:setRefreshToken(data.refresh_token)\n        if callback ~= nil then\n            callback({})\n        end\n    end\n    self.http:postForm('https://api.netatmo.net/oauth2/token', data, success, fail)\nend\n\nfunction Netatmo:setToken(token)\n    self.token = token\n    Globals:set('netatmo_atoken', token)\nend\n\nfunction Netatmo:setRefreshToken(refresh_token)\n    QuickApp:debug('setting new refresh token ')\n    QuickApp:debug(refresh_token)\n    self.refresh_token = refresh_token\n    Globals:set('netatmo_rtoken', refresh_token)\n    Config:setRefreshToken(refresh_token)\nend\n\nfunction Netatmo:getToken()\n    if not self.token and self.access_token ~= nil then\n        self.token = self.access_token\n    end\n    if string.len(self.token) > 10 then\n        return self.token\n    elseif string.len(Globals:get('netatmo_atoken', '')) > 10 then\n        return Globals:get('netatmo_atoken', '')\n    end\n    return \"\"\nend"
        }
    ]
}